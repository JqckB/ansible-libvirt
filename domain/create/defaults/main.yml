---
# basic arguments
libvirt_domain_groups: [] # names of Ansible nodes/groups used to provision the domain
libvirt_domain_name: # name/uuid of the domain (default: new uuid)
libvirt_domain_title: '' # title of the vm
libvirt_domain_description: '' # description of the vm
# note: if you do not provide a domain_id each run will create a new vm!
libvirt_ssh_port: # port forwarded from the host to the VM ssh (default: counter from ssh_base_port)

# default VM configuration
libvirt_vm_memory: "512MiB" # RAM memory available to the VM
libvirt_vm_vcpu: 1 # number of cores designated to the VM
libvirt_vm_vcpu_placement: 'static' # options 'auto', 'static', defaults to 'numatune'
libvirt_vm_vcpu_cpuset: [] # list of host CPU numbers the VM can run on
libvirt_vm_networks: ['default'] # libvirts id of networks this VM is part of
libvirt_vm_disk_size: "12G" # use this to change first disk size
libvirt_vm_features:
- acpi
- apic
- pae
libvirt_vm_serial_console: yes # make a console on serial port 0 available
libvirt_autostart: yes # should the domain VM start after reboot of the host

# Valid install_types:
libvirt_install_type: 'cloud-image' # way to install the VM (this only affects the first run!)
#
# 1. 'cloud-image'
# ----------------
# a prepared cloud-image (like the Ubuntu Server Clound Images) is cloned
# cloud-init is used to adapt the basic setup
libvirt_cloud_image: # relative path to the base image of the domain (default: last created image)
# see also the cloud_init_... parameters
#

libvirt_extra_disks: []
# - id: 'data-disk' # logical name of the disk (required)
#   size: '8G' # size of the disk (required)
#   type: 'lvm' # type of the disk (required)
#   # type options
#   # 1. 'lvm' - logical disk
#   lvm_group: '' # name of volume group (required)
#   # 2. 'image' - file image
#   image_type: 'qcow2' # image types supported by the host (required)

# see https://bazaar.launchpad.net/~cloud-init-dev/cloud-init/trunk/view/head:/doc/examples/cloud-config-user-groups.txt
libvirt_vm_users:
- name: ubuntu
  gecos: Ubuntu
  ssh-authorized-keys: [] # required!
  shell: /bin/bash
  sudo: ALL=(ALL) NOPASSWD:ALL
  groups: [adm, audio, cdrom, dialout, floppy, video, plugdev, dip, netdev]

# libvirt os settings - see: https://libvirt.org/formatdomain.html#elementsOS
libvirt_os_virtualized_x86_64: &libvirt_os_virtualized_x86_64
  type: 'hvm'
  type_arch: 'x86_64'

libvirt_os_virtualized_x86: &libvirt_os_virtualized_x86
  type: 'hvm'
  type_arch: 'i686'

libvirt_os:
  <<: *libvirt_os_virtualized_x86_64
# type: 'hvm' # options 'hvm', 'linux', 'exe'
# type_arch: 'x86_64' # cpu architecture required by the os
# type_machine: 'pc' # system architecture required by the os
# boot: ['hd'] # devices for boot

# libvirt cpu settings - see: https://libvirt.org/formatdomain.html#elementsCPU
#
# use these settings for easily migratable vms (default)
libvirt_vm_cpu_migratable: &libvirt_vm_cpu_migratable
  match: 'exact' # options 'minimum', 'exact', 'strict'
  mode: 'custom' # options 'custom', 'host-model', 'host-passthrough'
#
# use these settings for fast, supports nested virtualisation
libvirt_vm_cpu_fast: &libvirt_vm_cpu_fast
  mode: 'host-model' # everything libvirt understands

libvirt_vm_cpu:
  <<: *libvirt_vm_cpu_fast
# more options
# model: # name of the cpu model eg. "core2duo"
# model_fallback: 'allow' # fallback options 'allow', 'forbid'
# vendor: # name of the vendor eg. "Intel"
# topology: # simulated CPU topology
#   sockets: 1
#   cores: 1
#   threads: 1
# features: [] # array of hashes
# - name: 'vmx'
#   policy: 'require' # options 'force', 'require', 'optional', 'disable', 'forbid'
# - 'smx' # feature with default policy 'require'

# configuration options
libvirt_images_path: "/var/lib/libvirt/images" # path on the host, where all the images are stored
libvirt_host_ip_address: # host ip address where ssh_ports are made available (default: ansible_default_ipv4.address)
libvirt_ssh_base_port: 22000 # first host port for forwards to VM ssh
libvirt_ssh_guest_port: 22 # guest port for ssh
# template for the stored facts hash (values are variable/fact names)
libvirt_domain_fact_template: >
  {
    u"ssh_port": {{ libvirt_result_ssh_port }},
    u"groups": {{ libvirt_domain_groups }}
  }

ansible_facts_path: '/etc/ansible/facts.d' # path where local Ansible facts are stored & read
